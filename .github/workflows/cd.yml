name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy deployment files and deploy
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DEPLOY_PATH: /home/ubuntu/deployments/rudnote

          POSTGRES_DB: rudnote_db
          POSTGRES_USER: rudnote_user
          POSTGRES_PASSWORD: rudnote_pass
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY }}
          R2_SECRET_KEY: ${{ secrets.R2_SECRET_KEY }}

        run: |
          echo "$SSH_KEY" > github-ec2.pem && chmod 600 github-ec2.pem

          # Create deployment directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "mkdir -p ${DEPLOY_PATH}"

          # Copy docker-compose and other deployment files
          scp -o StrictHostKeyChecking=no -i github-ec2.pem docker-compose.prod.yml ${USER}@${HOST}:${DEPLOY_PATH}/docker-compose.prod.yml
          scp -o StrictHostKeyChecking=no -i github-ec2.pem .env.prod ${USER}@${HOST}:${DEPLOY_PATH}/.env || echo "No .env.prod file found, skipping..."

          # Deploy on EC2
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "
            export R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}
            export R2_BUCKET=${{ secrets.R2_BUCKET }}
            export R2_ACCESS_KEY=${{ secrets.R2_ACCESS_KEY }}
            export R2_SECRET_KEY=${{ secrets.R2_SECRET_KEY }}

            cd ${DEPLOY_PATH}
            
            # Pull the latest images
            sudo docker compose -f docker-compose.prod.yml pull
            
            # Stop existing containers
            sudo docker compose -f docker-compose.prod.yml down || true
            
            # Start updated containers in detached mode
            sudo docker compose -f docker-compose.prod.yml up -d
            
            # Clean up old images
            sudo docker image prune -f
            
            # Verify deployment status
            sudo docker compose -f docker-compose.prod.yml ps
            
            echo 'Deployment completed successfully!'
          "

          # Clean up SSH key
          rm -f github-ec2.pem
