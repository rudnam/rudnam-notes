name: Build & Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Caddy image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.caddy
          push: ${{ github.event_name != 'pull_request' }}
          tags: rudnam/notes-caddy:latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: rudnam/notes-frontend:latest
          build-args: |
            VITE_API_URL=/api

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: rudnam/notes-backend:latest

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy deployment files and deploy
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DEPLOY_PATH: /home/ubuntu/deployments/rudnam-notes
        run: |
          echo "$SSH_KEY" > github-ec2.pem && chmod 600 github-ec2.pem

          # Create deployment directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "mkdir -p ${DEPLOY_PATH}"

          # Copy docker-compose and other deployment files
          scp -o StrictHostKeyChecking=no -i github-ec2.pem docker-compose.prod.yml ${USER}@${HOST}:${DEPLOY_PATH}/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i github-ec2.pem .env.prod ${USER}@${HOST}:${DEPLOY_PATH}/.env || echo "No .env.prod file found, skipping..."

          # Deploy on EC2
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "
            cd ${DEPLOY_PATH}
            
            # Pull the latest images using your exact command
            sudo docker compose -f docker-compose.prod.yml pull
            
            # Stop existing containers
            sudo docker compose -f docker-compose.prod.yml down || true
            
            # Start the updated containers
            sudo docker compose -f docker-compose.prod.yml up -d
            
            # Clean up old images to save space
            sudo docker image prune -f
            
            # Verify deployment
            sudo docker compose -f docker-compose.prod.yml ps
            
            echo 'Deployment completed successfully!'
          "

          # Clean up the SSH key
          rm -f github-ec2.pem
