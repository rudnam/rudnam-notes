name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci && npx playwright install --with-deps

      - name: Start backend server
        run: docker compose up -d backend db

      - name: Wait for backend to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/actuator/health | grep '"status":"UP"'; then
              echo "Backend is ready"
              exit 0
            fi
            echo "Waiting for backend to be ready..."
            sleep 2
          done
          echo "Backend did not become ready in time."
          docker compose logs
          exit 1

      - name: Run Lint
        run: npm run lint

      - name: Run Build
        run: npm run build

      - name: Run Unit tests
        run: npm run test

      - name: Run Playwright tests
        run: npm run test:e2e

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Set up db
        run: docker compose up -d db

      - name: Wait for db to be ready
        run: |
          for i in {1..10}; do
            if docker exec $(docker ps -qf "name=db") pg_isready -U rudnote_user -d rudnote_db; then
              echo "Database is ready"
              exit 0
            fi
            echo "Waiting for database to be ready..."
            sleep 2
          done
          echo "Database did not become ready in time."
          docker compose logs db
          exit 1

      - name: Test
        run: |
          ./mvnw clean verify -DskipTests=false -Dmaven.test.failure.ignore=true
          if [ $? -ne 0 ]; then
            echo "Tests failed"
            exit 1
          fi
          echo "Tests passed"

  docker-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: rudnam/rudnote-backend:latest

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            VITE_API_URL=/api
          tags: rudnam/rudnote-frontend:latest

      - name: Build and push caddy
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.caddy
          push: true
          tags: rudnam/rudnote-caddy:latest
